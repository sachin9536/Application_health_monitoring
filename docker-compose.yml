version: "3.9"

services:
  # ======================
  # MongoDB Database
  # ======================
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - private_net

  # ======================
  # Mongo Express UI
  # ======================
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=secret
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_BASICAUTH=false
    depends_on:
      - mongodb
    networks:
      - private_net

  # ======================
  # Auth Service
  # ======================
  auth_service:
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    container_name: auth_service
    depends_on:
      - mongodb
    ports:
      - "8001:8000" # API
      - "8002:8002" # Metrics
    environment:
      - MONGO_URI=mongodb://admin:secret@mongodb:27017
      - JWT_SECRET=mysecretkey
    networks:
      - private_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./logs:/app/logs

  # ======================
  # Order Service
  # ======================
  order_service:
    build:
      context: .
      dockerfile: services/order_service/Dockerfile
    container_name: order_service
    depends_on:
      - mongodb
    ports:
      - "8003:8000" # API
      - "8004:8004" # Metrics
    environment:
      - MONGO_URI=mongodb://admin:secret@mongodb:27017
      - JWT_SECRET=mysecretkey
    networks:
      - private_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./logs:/app/logs

  # ======================
  # Catalog Service
  # ======================
  catalog_service:
    build:
      context: .
      dockerfile: services/catalog_service/Dockerfile
    container_name: catalog_service
    depends_on:
      - mongodb
    ports:
      - "8005:8000" # API
      - "8006:8006" # Metrics
    environment:
      - MONGO_URI=mongodb://admin:secret@mongodb:27017
    networks:
      - private_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./logs:/app/logs

  # ======================
  # Prometheus Monitoring
  # ======================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - auth_service
      - order_service
      - catalog_service
    networks:
      - private_net
  controller:
    build:
      context: .
      dockerfile: Dockerfile.controller # see below
    container_name: controller
    depends_on:
      auth_service:
        condition: service_healthy
      order_service:
        condition: service_healthy
      catalog_service:
        condition: service_healthy
    networks:
      - private_net
    volumes:
      - ./logs:/app/logs

  monitoring_engine:
    build:
      context: .
      dockerfile: Dockerfile.monitoring # see below
    container_name: monitoring_engine
    ports:
      - "8000:8000"
    depends_on:
      - prometheus
    networks:
      - private_net
    environment:

    volumes:
      - ./logs:/app/logs

volumes:
  mongo-data:

networks:
  private_net:
    driver: bridge
